name: Run lighthouse

on:
    pull_request:
        branches: develope
    push:
        branches: develope

jobs:
    lighthouse:
        name: Lighthouse CI
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20.18.0'

            - name: Install dependencies
              run: yarn install

            - name: Build project
              run: yarn build

            - name: Run server & Lighthouse CI
              run: |
                  yarn preview & # Vite preview ÏÑúÎ≤Ñ Ïã§Ìñâ
                  sleep 10 # ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞
                  yarn dlx @lhci/cli autorun

                  - name: Format lighthouse score
                  id: format_lighthouse_score
                  uses: actions/github-script@v3
                  with:
                      github-token: ${{secrets.GITHUB_TOKEN}}
                      script: |
                        const fs = require('fs');
                        const results = JSON.parse(fs.readFileSync("./lhci_reports/manifest.json"));
                        
                        // Î™®Îì† Í≤∞Í≥ºÏùò ÌèâÍ∑† Í≥ÑÏÇ∞
                        const averages = results.reduce((acc, result) => {
                          const { summary } = result;
                          const details = JSON.parse(fs.readFileSync(result.jsonPath));
                          const { audits } = details;
                          
                          if (!acc.summary) {
                            acc.summary = {...summary};
                            acc.audits = {
                              'first-contentful-paint': { score: 0, value: 0 },
                              'largest-contentful-paint': { score: 0, value: 0 },
                              'cumulative-layout-shift': { score: 0, value: 0 }
                            };
                          } else {
                            Object.keys(summary).forEach(key => {
                              acc.summary[key] += summary[key];
                            });
                          }
                          
                          ['first-contentful-paint', 'largest-contentful-paint', 'cumulative-layout-shift'].forEach(metric => {
                            acc.audits[metric].score += audits[metric].score;
                            acc.audits[metric].value += parseFloat(audits[metric].displayValue);
                          });
                          
                          return acc;
                        }, {});

                        // ÌèâÍ∑†Í∞í Í≥ÑÏÇ∞
                        const count = results.length;
                        Object.keys(averages.summary).forEach(key => {
                          averages.summary[key] = Math.round((averages.summary[key] / count) * 100);
                        });
                        
                        Object.keys(averages.audits).forEach(metric => {
                          averages.audits[metric].score = averages.audits[metric].score / count;
                          averages.audits[metric].value = (averages.audits[metric].value / count).toFixed(1);
                        });

                        const score = (res) => (res >= 90 ? "üü¢" : res >= 50 ? "üü†" : "üî¥");

                        const comment = [
                          `## ‚ö°Ô∏è Lighthouse Report (Average of ${count} runs)`,
                          `| Category | Score |`,
                          `| --- | --- |`,
                          `| ${score(averages.summary.performance)} Performance | ${averages.summary.performance} |`,
                          `| ${score(averages.summary.accessibility)} Accessibility | ${averages.summary.accessibility} |`,
                          `| ${score(averages.summary.seo)} SEO | ${averages.summary.seo} |`,
                          `| ${score(averages.summary['best-practices'])} Best Practices | ${averages.summary['best-practices']} |`,
                          ``,
                          `### Core Web Vitals`,
                          `| Metric | Value |`,
                          `| --- | --- |`,
                          `| ${score(averages.audits['first-contentful-paint'].score * 100)} First Contentful Paint | ${averages.audits['first-contentful-paint'].value} s |`,
                          `| ${score(averages.audits['largest-contentful-paint'].score * 100)} Largest Contentful Paint | ${averages.audits['largest-contentful-paint'].value} s |`,
                          `| ${score(averages.audits['cumulative-layout-shift'].score * 100)} Cumulative Layout Shift | ${averages.audits['cumulative-layout-shift'].value} |`,
                        ].join('\n');

                        core.setOutput('comments', comment);

            - name: Comment PR
              if: github.event_name == 'pull_request'
              uses: thollander/actions-comment-pull-request@v2
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  message: ${{ steps.format_lighthouse_score.outputs.comments }}
                  comment_tag: lighthouse
                  mode: recreate
